# ------------------------------
# General Settings
# ------------------------------
## Environment variable configuration
##
## LANG
## http://curiousabt.blog27.fc2.com/blog-entry-65.html
export LANG=ja_JP.UTF-8
export LESSCHARSET=utf-8

## コマンド入力補完
if [ -f ~/.zsh/auto-fu.zsh ]; then
    source ~/.zsh/auto-fu.zsh
    function zle-line-init () {
        auto-fu-init
    }
    zle -N zle-line-init
    zstyle ':completion:*' completer _oldlist _complete
fi

fpath=(~/zsh-completions/src $fpath)
autoload -U compinit; compinit # 補完機能は有効にしとく必要がある

## コマンドのオプションを表示
#autoload -U compinit
#compinit

## cd後自動でlsする
function chpwd() { gls --color=auto --hide='*~' }

## ctags
alias ctags='/usr/local/bin/ctags'

## diff
## colordiff: http://www.glidenote.com/archives/1403
alias difc='colordiff -w'
alias dify='diff -y --suppress-common-lines'

## less
## colordiffの結果をパイプでlessとかに渡すとおかしなことになるので、
## -Rを付けるとちゃんとカラー表示される。
alias diff='colordiff'
alias less='less -R'

## tmux
alias tm='tmux -2'
alias tml='tmux ls'
alias tmk='tmux kill-session -t'
alias tma='tmux attach -t'

## mysql(出力エディタはcat)
alias mysql='mysql --pager='cat''

## command edit
alias ls='gls --color=auto --hide="*~"'
alias la='ls -la'

## コマンド履歴
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data

### for iTerm2 tabs
tab-color() {
    echo -ne "\033]6;1;bg;red;brightness;$1\a"
    echo -ne "\033]6;1;bg;green;brightness;$2\a"
    echo -ne "\033]6;1;bg;blue;brightness;$3\a"
}
tab-reset() {
    echo -ne "\033]6;1;bg;*;default\a"
}

#tab title
function chpwd() { ls; echo -ne "\033]0;$(pwd | rev | awk -F \/ '{print "/"$1"/"$2}'| rev)\007"}
#tab color
alias top='tab-color 134 200 0; top; tab-reset'
chpwd

# ------------------------------
# gitブランチとステータスの表示
# ------------------------------
## http://d.hatena.ne.jp/mollifier/20090814/p1
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '(%b)'
zstyle ':vcs_info:*' actionformats '(%b)[%a]'

precmd () {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

# ------------------------------
# Look And Feel Settings
# ------------------------------
# Terminal Colorの設定
export LSCOLORS=ExFxCxDxBxegedabagacad

# 補完時の色の設定
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

# ZLS_COLORSとは？
export ZLS_COLORS=$LS_COLORS

# lsコマンド時、自動で色がつく(ls -Gのようなもの？)
export CLICOLOR=true

# 補完候補に色を付ける
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

### Prompt ###
# プロンプトに色を付ける
# http://www.sakito.com/2011/11/zsh.html
autoload -U colors; colors

# 一般ユーザ時
tmp_prompt="%{${fg[cyan]}%}(${HOST}) %#%{${reset_color}%} "
tmp_prompt2="%{${fg[cyan]}%}%_> %{${reset_color}%}"
tmp_rprompt="%1(v|%F{magenta}%1v%f|)%{${fg[green]}%}[%(5~,%-2~/.../%2~,%~)]%{${reset_color}%}"
tmp_sprompt="%{${fg[yellow]}%}%r is correct? [Yes, No, Abort, Edit]:%{${reset_color}%}"

# rootユーザ時(太字にし、アンダーバーをつける)
if [ ${UID} -eq 0 ]; then
  tmp_prompt="%B%U${tmp_prompt}%u%b"
  tmp_prompt2="%B%U${tmp_prompt2}%u%b"
  tmp_rprompt="%B%U${tmp_rprompt}%u%b"
  tmp_sprompt="%B%U${tmp_sprompt}%u%b"
fi

PROMPT=$tmp_prompt    # 通常のプロンプト
PROMPT2=$tmp_prompt2  # セカンダリのプロンプト(コマンドが2行以上の時に表示される)
RPROMPT=$tmp_rprompt  # 右側のプロンプト
SPROMPT=$tmp_sprompt  # スペル訂正用プロンプト

PATH=/usr/local/bin:/usr/local/share:$PATH
PATH=/usr/local/texlive/2009/bin/universal-darwin:$PATH
PATH=/usr/local/texlive/p2009/bin/i386-apple-darwin10.3.0:$PATH
PATH=/usr/local/bibunsho/bin/i386-darwin:$PATH
export PATH

# ------------------------------
# Programing Setting
# ------------------------------
### Ruby ###

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

#git 
alias gitp='git pull origin master' 
alias gitc='git checkout' 
alias gits='git status' 
alias gitb='git branch'
alias gitpurge='git branch --merged | grep -v "\*" | xargs -n 1 git branch -d' 

# history zaw => #
function mkcd(){mkdir -p $1 && cd $1}
source "$HOME/.dotfiles/zaw/zaw.zsh"
bindkey '^h' zaw-history
# ヒストリに追加されるコマンド行が古いものと同じなら古いものを削除
setopt hist_ignore_all_dups
# スペースで始まるコマンド行はヒストリリストから削除
setopt hist_ignore_space
# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify
# 余分な空白は詰めて記録
setopt hist_reduce_blanks  
# 古いコマンドと同じものは無視 
setopt hist_save_no_dups
# historyコマンドは履歴に登録しない
setopt hist_no_store
# 補完時にヒストリを自動的に展開         
setopt hist_expand
# 履歴をインクリメンタルに追加
setopt inc_append_history

# for zsh-syntax-highlighting
source $HOME/.dotfiles/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# for zsh-autosuggestion
source $HOME/.dotfiles/zsh-autosuggestions/zsh-autosuggestions.zsh

# for pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# change the current directory to a rubygem directory
## brew install go
## go get github.com/lestrrat/peco/cmd/peco/
cdgem () {
  local bundle_gems="$(bundle list | grep '\*' | sed -e 's/^ *\* *//g')"
  if [[ -n "$bundle_gems" ]]; then
    gem=$(echo "$bundle_gems" | peco | cut -d \  -f 1)
    [[ -z "$gem" ]] && return 1
    cd $(bundle show $gem)
  else
    gem=$(gem list | peco | cut -d \  -f 1)
    [[ -z "$gem" ]] && return 1
    if ruby --version | grep 'ruby 2' >/dev/null; then
      cd $(ruby -e 'puts Gem::Specification.find_by_name(ARGV[0]).full_gem_path' -- $gem)
    else
      cd $(ruby -e 'puts Gem.source_index.find_name(ARGV[0]).last.full_gem_path' -- $gem)
    fi
  fi
}

# for growl notification
REPORTTIME=5

# ssh tab color
function sshc() {
  tab-color 255 255 0
  command ssh -A $1
}